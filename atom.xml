<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OSv Blog]]></title>
  <link href="http://osv.io/blog/atom.xml" rel="self"/>
  <link href="http://osv.io/blog/"/>
  <updated>2014-10-03T20:22:02-07:00</updated>
  <id>http://osv.io/blog/</id>
  <author>
    <name><![CDATA[Cloudius Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Cloud Wake-up Call]]></title>
    <link href="http://osv.io/blog/blog/2014/10/03/cloud-reboot/"/>
    <updated>2014-10-03T17:54:23-07:00</updated>
    <id>http://osv.io/blog/blog/2014/10/03/cloud-reboot</id>
    <content type="html"><![CDATA[<p><strong>By Dor Laor</strong></p>

<p>If you use AWS or Rackspace, there is a good chance that you got affected by <a href="https://gigaom.com/2014/09/24/yikes-big-amazon-web-services-reboot-on-the-way/">cloud-reboot</a>. Ten percent of AWS machines were forced to reboot during the weekend period due to a simple bug that created a security vulnerability. The reboot could have been prevented/mitigated through the use of sophisticated but handy tools. Such tools have existed for years but few people use them.</p>

<p>Let’s take a closer look at the particular problem and proceed toward a call for action for usage of additional, fantastic low-level features that are hardly being used by IaaS/PaaS vendors.</p>

<p>The cloud-reboot trigger is a tiny off-by-12kb xen hypervisor bug. A simple Model Specific Register check had a wrong limit as you can observe in the
<a href="http://xenbits.xen.org/xsa/xsa108.patch">fix</a> for the <a href="http://xenbits.xen.org/xsa/advisory-108.html">security vulnerability</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-    case MSR_IA32_APICBASE_MSR ... MSR_IA32_APICBASE_MSR + 0x3ff:
</span><span class='line'>+    case MSR_IA32_APICBASE_MSR ... MSR_IA32_APICBASE_MSR + 0xff:</span></code></pre></td></tr></table></div></figure>


<p>The vulnerability allows an attacker to either crash the hypervisor or retrieve data about other tenants. It’s really a long shot since the memory probably belongs to Xen addresses but in theory one can get lucky and read someone else’s passwords/keys.</p>

<p>Kudos to Amazon and Rackspace for being on the safe side. The fix is a huge hassle and pain for such a small chance of being successfully targeted. Kudos for Xen (and the other hypervisor vendors) for developing mature hypervisors that these events are that rare.</p>

<p>Now how could an IaaS vendor mitigate the problem without a reboot?</p>

<h2>Option #1 &ndash; Dynamic Code Patching</h2>

<p>Dynamic code patch technology for running-code has been available for years. Initially it was <a href="http://en.wikipedia.org/wiki/Ksplice">KSplice</a>, and
that was recently followed by <a href="https://github.com/dynup/kpatch">KPatch</a>. Lean cloud providers <a href="https://twitter.com/extramsp/status/18715823586">reported KSplice deployment for Xen 4 years ago!</a></p>

<p><img src="http://osv.io/blog/images/extramsp.png" alt="Cloud provider announces Ksplice support, on Twitter" /></p>

<p>XSA-108, the cloud-reboot bug, could have been the perfect candidate for this.
Hold your horses; Ksplice probably hadn’t been integrated to Xen and Ksplice is only applicable to dom-0. However, didn’t they see it coming? Now 10% of the Internet needs a reboot because no one picked it up. Let’s see whether a quick developer group will come to the rescue.  Ouch.</p>

<h2>Option #2 &ndash; Live migration</h2>

<p>Look ma, no hands&hellip;live migrate the VMs from an old hypervisor version to a patched hypervisor without service interruption.</p>

<p>At Red Hat, I managed the KVM and Xen development teams. We were heavily invested in live migration development. A great deal of thought was given to cross-release migration, resulting in the ability to migrate a VM running on KVM version x to version x+y.  Sometimes even the opposite direction was allowed. We maintained a huge matrix of migration options which included the preservation of the virtual-hardware version. This means that a KVM hypervisor can represent a variety of virtual-hardware versions (combo of cpu+devices) and keep the ABI (Application Binary Interface) compatible across KVM releases and live migration events.</p>

<p>Live migration was constantly optimized to reduce the effect on the running-workloads as well as to minimize downtime to few msecs. Smart compression, hot-page-transfer prioritization, and even more adventurous post-copy migration were deployed.</p>

<p>To my surprise, several years and millions of hypervisors later, most cloud providers do not implement live migration. That’s rather unfortunate for a couple of reasons:</p>

<ul>
<li><p><strong>Live migration allows maintenance mode.</strong> The host can be taken down while the VMs are being migrated to a different host</p></li>
<li><p><strong>Dynamic load balancing</strong> It’s possible to over-provision resources such as cpu, network, memory, etc in order to increase virtual server density. In case of load, live migrate VMs balance the host resources. Over-provisioning can reduce the cloud-bills dramatically; for a theoretical example, check the cost of a <a href="http://aws.amazon.com/ec2/instance-types/">t2-micro</a> instance.</p></li>
</ul>


<p>A leading cloud provider does use live migration, mainly because it uses shared storage for the VMs and the migration is just about the VM RAM. Other IaaS vendors use local storage but the &lsquo;excuse&rsquo; does not hold since for long it is possible to live migration local storage too . Sophisticated scenarios are supported; for example, a VM template image can reside on shared storage. There is no need to copy the image to the local disk when the VM is provisioned. Instead, the VM starts execution locally while its disk is remote. On the fly the disk requests are served from the network while a background task transfers the entire disk to the local hypervisor. In a similar way, live migration of a VM with local storage can takes place.</p>

<p>Even open source projects such as Openstack and CloudFoundry do not support live migration. After all the time and effort invested in capturing the state of the virtual machine hardware state, it’s pretty sad that the feature isn’t enabled in practice and only data center solutions like vCenter and RHEV support it. Just to finalize this rant, please allow me to enclose the type of data a live migration captures:</p>

<ul>
<li>Complete configuration of the virtual hardware setup</li>
<li>State of all CPU registers (General purpose, FPU, SIMD, MSRs,..)</li>
<li>State of the interrupt controllers</li>
<li>State of the disk drive (Registers, in-flight IO, interrupts)</li>
<li>State of the network cards (Registers, in-flight IO, interrupts)</li>
<li>State of all other devices &ndash; keyboard, mouse, USB, GPU, etc</li>
</ul>


<p>Modern hypervisors manage to deal with the above complexity and send GBs of data underneath the guest execution. In turn, the cloud management software needs only to find a target host and evacuate the source host (in the case of hardware/software maintenance or a bit more sophisticated for load balancing needs). This is a fair deal, now please, go implement it.</p>

<h2>&lt;wake up call continues></h2>

<p>Since I started with two important OS features that aren’t implemented (dynamic patching and live migration), let me add to the list the following:</p>

<ul>
<li><strong>Hot (un) plug of memory and cpu</strong> This is a pure scale-up scenario. You start a small VM and if there is a need, add virtual CPUs and/or memory to the mix. Most OS’s and hypervisors support it.  Imagine you run a c3.8xlarge during the day, and at night you unplug resources to form a c3.large VM which costs 1/16 as much.</li>
</ul>


<p>Imagine you’re running a JVM application that needs an immediate garbage collection (GC). Today, the application will experience a Stop-The-World phase which will translate into downtime that can go up to several seconds (a function of heap size).  Instead, such a VM can ask to hot plug additional RAM and CPUs 1 second before it really needs to pause. The JVM may use even a silly copy garbage collector to copy the live objects from the original RAM block to newer hotplugged-RAM blocks and unplug the old block entirely (using the extra vCPUs to accelerate the action).</p>

<ul>
<li><p><strong>Trusted boot/computing</strong> Trusted Computing is a technology to keep the integrity of an operating system, which is based on a secure chip such as “TPM (Trusted Platform Module)” and/or Intel’s TXT technology: Trusted Execution Technology provides a hardware based root of trust to ensure that a platform boots with a known good configuration of firmware, BIOS, virtual machine monitor, and operating system, forming a fully signed and secure stack.</p></li>
<li><p><strong>Fast VM provision time</strong> <a href="http://osv.io/">OSv</a> boots in under 1 second! However it takes significantly more time to provision a VM.  If the hypervisor and the OS can boot that fast, I see no reason for the hypervisor management code to be slower.</p></li>
</ul>


<h2>&lt;/wake up call continues></h2>

<p>Enough rants for one day, now let’s get back to <a href="https://twitter.com/search?q=%23osv">#OSv</a> and make it shine some more.</p>

<p><em>For more info on OSv, please follow <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merge the OS Into Your App, Not the Other Way Around!]]></title>
    <link href="http://osv.io/blog/blog/2014/09/26/ant/"/>
    <updated>2014-09-26T11:54:23-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/26/ant</id>
    <content type="html"><![CDATA[<p><strong>By Glauber Costa</strong></p>

<p>Don Marti and I will soon be presenting OSv at <a href="http://%20http://osv.io/blog/blog/2014/09/25/javaone/">JavaOne</a>. We are excited about
the conference, and thought we could give you a small preview of what we will
be talking about.</p>

<p>As you already know, OSv is at the same time an operating system, and a
library. It is as functional as an operating system, and as invisible as a
library. This means that you shouldn&rsquo;t really install your app into OSv, but
rather, merge them both naturally as a single entity.</p>

<p>If you are using Java, there is a huge chance that one way or another, your
project is built through Apache Ant, or similar tool.</p>

<p>If you have Capstan, our image building tool, that merges nicely and
beautifully with your Ant-based build process. Here is how:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;property name="hypervisor" value="qemu"/&gt;
</span><span class='line'>&lt;basename property="vm-name" file="${basedir}"/&gt;
</span><span class='line'>&lt;property name="capstanpath"
</span><span class='line'>   value="${user.home}/.capstan/repository/${vm-name}"/&gt;
</span><span class='line'>
</span><span class='line'>&lt;target name="vm" depends="jar"&gt;
</span><span class='line'>&lt;echo file="Capstanfile" append="false"&gt;
</span><span class='line'>base:
</span><span class='line'>   cloudius/osv-openjdk
</span><span class='line'>cmdline:
</span><span class='line'>  /java.so -jar ${jarname}
</span><span class='line'>files:
</span><span class='line'>  /${jarname}: build/jar/${jarname}&lt;/echo&gt;
</span><span class='line'>&lt;exec executable="capstan"&gt;
</span><span class='line'>    &lt;arg value="build"/&gt;
</span><span class='line'>    &lt;arg value="-p"/&gt;
</span><span class='line'>    &lt;arg value="${hypervisor}"/&gt;
</span><span class='line'>&lt;/exec&gt;
</span><span class='line'>&lt;copy tofile="HelloWorld.${hypervisor}"
</span><span class='line'>   file="${capstanpath}/${vm-name}.${hypervisor}"/&gt;
</span><span class='line'>&lt;delete file="Capstanfile"/&gt;
</span><span class='line'>&lt;/target&gt;</span></code></pre></td></tr></table></div></figure>


<p>The snippet above assumes that you already have a &ldquo;jar&rdquo; target in your build.</p>

<p>As you can guess from the image name, this example is a simple HelloWorld.  The
code, together with the complete build.xml file, can be downloaded
<a href="https://github.com/dmarti/OSvJavaOneDemo.git">on GitHub</a>.</p>

<p>Adding that step to your existing build environment, allows you to have a first-class VM in a format consumable by QEMU/KVM. Booting in your hypervisor
of choice, becomes just a matter of editing the file for the correct format.</p>

<p>And after that? Fire up Capstan and enjoy your VM!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[glauber@localhost JavaOne]$ capstan run JavaOne
</span><span class='line'>Created instance: JavaOne
</span><span class='line'>OSv v0.12
</span><span class='line'>eth0: 192.168.122.15
</span><span class='line'>Hello World</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, boot the HelloWorld.qcow2 image that was copied to the local
directory, with any tool you want.</p>

<p><strong>More info</strong></p>

<p>Are you attending JavaOne? We will show you this and more, at <a href="https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=4120">Parc 55 &ndash; Powell I/II, Tuesday the 30th (12:30 PM)</a></p>

<p>For general questions on OSv, please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get general updates by subscribing to this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSv at JavaOne]]></title>
    <link href="http://osv.io/blog/blog/2014/09/25/javaone/"/>
    <updated>2014-09-25T17:10:31-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/25/javaone</id>
    <content type="html"><![CDATA[<p><img src="http://osv.io/blog/images/speaking-at-javaone.jpg" alt="speaking at JavaOne" /></p>

<p>Glauber Costa and Don Marti are speaking at the JavaOne conference in San Francisco, on Tuesday, September 30.  Hope to see you there.</p>

<p><a href="https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=4120">OSv: The Operating System Designed for Java and the Cloud</a></p>

<p>Here&rsquo;s what you&rsquo;re in for:</p>

<blockquote><p>A lot of the cloud discussion centers around which hypervisors are the best and which management tools will simplify our life the most. But is it the whole story? When problems are addressed from the lower and higher layers, the middleman—the guest operating system—is usually left behind. This changes with OSv, an operating system designed from the ground up to run Java applications in the cloud. OSv is a library OS. Therefore, you can think of using it as being a way to boot a JVM directly into the cloud. Forget OS management: it’s your application and the end of the story. Besides explaining the architecture, this presentation demonstrates how designing an OS with Java in mind can benefit the Java ecosystem.</p></blockquote>

<p>We&rsquo;ll demonstrate a nine-second build of a VM from a Java project.  Hope to see you there.</p>

<p>You can keep up with the latest OSv news from this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shellshock]]></title>
    <link href="http://osv.io/blog/blog/2014/09/25/shellshock/"/>
    <updated>2014-09-25T15:54:23-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/25/shellshock</id>
    <content type="html"><![CDATA[<p><strong>By Tzach Livyatan</strong></p>

<p>A new bash bug is &lsquo;bigger than Heartbleed&rsquo; and puts millions of websites.
In short, Shellshock can take advantage of any server which call Bash.
You can find a good insight into Shellshock <a href="http://lcamtuf.blogspot.co.il/2014/09/quick-notes-about-bash-bug-its-impact.html">on Michal Zalewski&rsquo;s blog</a>.</p>

<p>A Bash patch is already available, but there is a bigger question:
Why do you want  Bash on a production server in the first place?
By its nature Bash is a dangerous beast, wouldn&rsquo;t it be better to keep him on the cage and off your system?</p>

<p>What did you say?</p>

<p>&ldquo;I need my Bash for troubleshooting?&rdquo;</p>

<p>Do you now?</p>

<!-- more -->


<p>I assume your production server already writes logs and send traps to to a remote machine.
If not, you probably do not have many production servers.
What if in addition you had a secure remote REST API which allows you to probe files, get traces and any other information element you need?
Do you still need Bash?
And if you don&rsquo;t, than wouldn&rsquo;t it be better not to have it on the first place?</p>

<p>Don Marti <a href="http://osv.io/blog/blog/2014/09/25/security-is-a-journey-not-a-destination/">writes</a> that the need for fast, reliable VM builds is the important lesson from this bug, but I disagree. Why not just remove the shell from the server?</p>

<p>OSv takes a different approach from other OSs on the subject.
Recognizing that most cloud servers only run one application, it is designed to run one and only one process.
Every interaction with OSv is done via a set of REST APIs, over SSL.
You can find the <a href="http://osv.io/api/swagger-ui/dist/index.html">current list of supported endpoints</a> on the OSv site.
Since <code>fork</code> is inherently not allowed, there is not way for a Shellshock-like bug to exist.
Sure, bugs in OSv may still lead to code injection via the API, but the surface of attack is much smaller, and dangerous APIs can be easily disabled.
OSv still supports a CLI, but its run outside the OS, and administrators can use the secure API to access it, just like everybody else.</p>

<p><strong>More info</strong></p>

<p>For general questions on OSv, please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get general updates by subscribing to this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waking Up Late, After Bash Fixing Night]]></title>
    <link href="http://osv.io/blog/blog/2014/09/25/security-is-a-journey-not-a-destination/"/>
    <updated>2014-09-25T13:54:23-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/25/security-is-a-journey-not-a-destination</id>
    <content type="html"><![CDATA[<p><strong>By Don Marti</strong></p>

<p>Yesterday we found out about <a href="https://lwn.net/Articles/613032/">a remotely exploitable hole in bash</a> from our favorite Linux news sites.  For some of us, our schedules on the night of September 24th were disrupted, and not in a good way.</p>

<p>It&rsquo;s true that my own Internet-facing code, while not perfect, isn&rsquo;t vulnerable.  But for one older web-based application I have to deal with, it&rsquo;s faster to install a new version of Bash than to trace through the code to make sure it isn&rsquo;t doing something bad, somewhere.</p>

<p>Clearly this particular bug isn&rsquo;t a problem on OSv, because OSv doesn&rsquo;t run Bash.  The whole point of Bash is to <code>fork()</code> and <code>exec()</code> other processes, and OSv doesn&rsquo;t do all that.  Everything runs in one process, with no shell available or needed.</p>

<p>As <a href="http://osv.io/blog/blog/2014/09/25/shellshock/">Tzach Livyatan points out</a>, managing OSv doesn&rsquo;t require a shell either.  There&rsquo;s one REST API for everything, from VM basics such as CPU and memory usage, up to <a href="http://osv.io/blog/blog/2014/08/26/jolokia-jmx-connectivity-in-osv/">JMX data from the application</a>.</p>

<p>But it looks like Tzach is missing the main point.</p>

<!-- more -->


<p>The problem isn&rsquo;t so much that someone discovered a bug in Bash.  The problem is <em>what happened to the evening of September 24, 2014</em>?  A software bug should be something that you fix, test, check in the fix, and go home, not a full <a href="http://www.tor.com/stories/2009/12/overtime">night on duty</a>.</p>

<p>I&rsquo;m starting to think that what&rsquo;s more important than any design advantages of OSv is the flow that it enables.   The size and, more important, simplicity of an OSv VM means that regenerating one is a matter of, let me time it&hellip; 9 seconds.  An OSv VM is a build artifact that I can crank out of my regular build system.</p>

<p>It would be full of security hubris to say that OSv will never have to issue a security fix.  Yes, there are many fewer lines of code, and yes, the C++ experts on the development team will point to shorter, clearer programming constructs in which fewer old-school bugs can hide.  But every software project has to issue a fix sometimes.</p>

<p>The question is how long it takes to get current and put the bug behind you.</p>

<p><strong>Repeatable flow, from commit to deploy</strong></p>

<p>At <a href="https://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=4120">JavaOne next week</a>, Glauber Costa and I will be speaking about <q>OSv: The Operating System Designed for Java and the Cloud</q>.  Glauber summed it up: <q>OSv is a library OS. Therefore, you can think of using it as being a way to boot a JVM directly into the cloud. Forget OS management: it’s your application and the end of the story.</q></p>

<p>The <a href="https://www.gartner.com/doc/2831925/make-sdlc-agile-using-cloud">complexity of maintaining conventional OS environments</a> looks like just a time-suck for developers, not a big problem.  But simplicity matters on a Big Security Day.</p>

<p><strong>More info</strong></p>

<p>For general questions on OSv, please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get general updates by subscribing to this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a NewRelic Agent to Your OSv Appliance]]></title>
    <link href="http://osv.io/blog/blog/2014/09/24/java-newrelic-agent/"/>
    <updated>2014-09-24T16:22:22-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/24/java-newrelic-agent</id>
    <content type="html"><![CDATA[<p><strong>By Tzach Livyatan</strong></p>

<p><a href="http://newrelic.com/">New Relic</a> is a popular real-time monitoring
service for Web and mobile applications.</p>

<p>In the following post I will describe how to add a New Relic
monitoring agent to your OSv virtual appliance, using <a href="http://tomcat.apache.org/">Tomcat</a> as an
example.</p>

<!-- more -->


<p>As first step, go to the <a href="http://newrelic.com/">New Relic web site</a> and log in  or open an account.  Following the instructions on the site, you should be prompted to download two files:</p>

<ul>
<li>newrelic.yml</li>
<li>newrelic.jar</li>
</ul>


<p>newrelic.yml should already have the your license key in it.
If you downloaded the file
<a href="http://download.newrelic.com/newrelic/java-agent/newrelic-agent/3.10.0/newrelic.yml">directly</a>,
you should make sure to edit the license line.
Make sure to update your application name in the same file. This name
will be used in the New Relic GUI.</p>

<p>There are two ways to build an OSv appliance:</p>

<ol>
<li>Using an OSv build from source</li>
<li>Using <a href="https://github.com/cloudius-systems/capstan">Capstan</a></li>
</ol>


<p>The first requires cloning OSv source code with Git, as described
<a href="https://github.com/cloudius-systems/osv-apps/tree/master/java-newrelic">here</a>.
The second assumes you are familiar with <a href="https://github.com/cloudius-systems/capstan">Capstan</a> and is described below.</p>

<h3>Using Capstan to add a NewRelic Agent</h3>

<ul>
<li>Create a new project directory</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir my-tomcat-with-newrelic
</span><span class='line'>cd my-tomcat-with-newrelic</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Copy newrelic.jar and newrelic.yml to this location</li>
<li>Create a new <a href="https://github.com/cloudius-systems/capstan/blob/master/Documentation/Capstanfile.md">Capstanfile</a> with the following contents:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>base: cloudius/osv-tomcat
</span><span class='line'>
</span><span class='line'>cmdline: &gt;
</span><span class='line'>  /java.so
</span><span class='line'>  -javaagent:/tools/newrelic.jar
</span><span class='line'>  -cp /usr/tomcat/bin/bootstrap.jar:/usr/tomcat/bin/tomcat-juli.jar
</span><span class='line'>  -Djava.util.logging.config.file=/usr/tomcat/conf/logging.properties
</span><span class='line'>  -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
</span><span class='line'>  -Dcatalina.base=/usr/tomcat
</span><span class='line'>  -Dcatalina.home=/usr/tomcat
</span><span class='line'>  -Djava.io.tmpdir=/usr/tomcat/temp
</span><span class='line'>  org.apache.catalina.startup.Bootstrap
</span><span class='line'>  start
</span><span class='line'>
</span><span class='line'>files:
</span><span class='line'>  /tools/newrelic.jar: newrelic.jar
</span><span class='line'>  /tools/newrelic.yml: newrelic.yml</span></code></pre></td></tr></table></div></figure>


<p>The base OSv image is <code>tomcat</code>, the cmdline include both Tomcat and
  New Relic options, and the files are the two New Relic files: the JAR and the configuration file.</p>

<ul>
<li>build the image</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>capstan build</span></code></pre></td></tr></table></div></figure>


<p>You are done! you now have a ready VM with Tomcat and a New Relic agent.
To run the image locally:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>capstan run -n bridge</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Go to the New Relic web app, monitor your application, and give yourself a
pat on the shoulder :)</li>
</ul>


<p>You can keep up with the latest OSv news from this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or by following <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.  Questions always welcome on the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev</a> mailing list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSv Meetup Group: Convert Your Application to a Run-anywhere VM]]></title>
    <link href="http://osv.io/blog/blog/2014/09/22/meetup/"/>
    <updated>2014-09-22T17:54:23-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/22/meetup</id>
    <content type="html"><![CDATA[<p><strong>By Don Marti</strong></p>

<p>Fast is better than slow. Simple is better than complex. And easily building a run-anywhere VM from a Java application is better than trying to figure out the whole OS business.</p>

<p><a href="http://osv.io/">OSv</a> is the simple, fast OS platform designed to run one application in the cloud, without the complexity of old-school OSs with their local users, permissions, and sevices.</p>

<p><strong>Who:</strong> You</p>

<p><strong>What:</strong> Hands-on OSv hacking sesssion</p>

<p><strong>Where:</strong> San Francisco, California, USA (see link for address)</p>

<p><strong>When:</strong> 3pm-8pm Wednesday, September 24, 2014 (drop in any time)</p>

<p><strong>Why:</strong> Get your application running in the cloud without the legacy OS complexity.</p>

<p>OSv now includes the <a href="http://www.jolokia.org/">Jolokia</a> JMX-via-JSON-REST connector, providing full read/write access to the entire set of Java manageability attributes and operations. Now you no longer need to set up and secure separate JMX-over-RMI connectivity with your Java application to fully manage it. (<a href="http://osv.io/blog/blog/2014/08/26/jolokia-jmx-connectivity-in-osv/">details here</a>).</p>

<p>Please join us for the next meeting of the OSv <a href="http://www.meetup.com/OSv-Developer-Meetup/">Meetup group</a> in San Francisco, and learn to do a quick, three-second build of a first-class OSv VM that will run on your platform of choice, whether it&rsquo;s VMware, VirtualBox, Amazon, Google, or KVM.</p>

<p><img src="http://osv.io/blog/images/meetup.jpg" alt="attendees" /></p>

<p>Bring your laptop and your favorite Java project, or just follow along.  We&rsquo;ll conclude with food and a few lightning talks and demos.</p>

<p>Our hosts at <a href="http://ohmdata.com/">OhmData</a> are once again making their cool South of Market office space available.  If you&rsquo;re not already a member of the OSv <a href="http://www.meetup.com/OSv-Developer-Meetup/">Meetup group</a>, please join us for this hands-on session.  For general questions on OSv, please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get general updates by subscribing to this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Dashboard Tab for Insight on Cassandra Virtual Appliances]]></title>
    <link href="http://osv.io/blog/blog/2014/09/18/cassandra-dashboard-tab/"/>
    <updated>2014-09-18T06:00:00-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/18/cassandra-dashboard-tab</id>
    <content type="html"><![CDATA[<p><strong>By Tzach Livyatan</strong></p>

<p>We are constantly looking for ways to improve the OSv virtual appliance experience.  The latest improvement is an integrated dashboard, presenting a combination of:</p>

<ul>
<li>OS related metrics (CPU, memory, threads, &hellip;)</li>
<li>Profiling related metrics (trace points)</li>
<li>JVM related metrics (heap, GC, &hellip;)</li>
<li>Cassandra related metrics (latency, tasks, cluster status)</li>
</ul>


<p><img src="http://osv.io/blog/images/cassandra-tab.png" alt="tab" /></p>

<!-- more -->


<p>The dashboard is yet another example of using
<a href="osv.io/api/swagger-ui/dist/index.html">REST API</a> to monitor and
control OSv and
OSv virtual appliances. These REST APIs are open for the
user directly. In particular, the new Capstan tab takes advantage of the newly added
<a href="http://osv.io/blog/blog/2014/08/26/jolokia-jmx-connectivity-in-osv/">Jolokia</a>
connector, exposing JMX information over REST.
The OSv REST API makes it simple to manage your OSv virtual appliance with <code>curl(1)</code> or your own script.</p>

<p>There are other great tools out there for JVM monitoring and profiling, like <a href="http://visualvm.java.net/">VisualVM</a>.
The OSv dashboard is unique by unifying the end-to-end virtual appliances functionality:
From the application to the JVM, down to the OS and HW status.</p>

<p>In particular, trace points allow a deep dive into the system execution, providing similar functionality on OSv to what <a href="https://en.wikipedia.org/wiki/DTrace">DTrace</a> does for Solaris.</p>

<p>We are planing to provide similar application-level tabs for other OSv virtual appliances.
Want to build a tab for your favorite application on OSv?
Clone the <a href="https://github.com/cloudius-systems/osv-gui">osv-gui</a> repository and start submitting pull requests!</p>

<p>You can keep up with the latest OSv news from this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or following <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed Run: Running 4 Virtual Appliances on Your Laptop in 5 Seconds Overall]]></title>
    <link href="http://osv.io/blog/blog/2014/09/13/how-fast-can-you-run-4-vm/"/>
    <updated>2014-09-13T23:30:00-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/13/how-fast-can-you-run-4-vm</id>
    <content type="html"><![CDATA[<p><strong>By Dor Laor, Tzach Livyatan</strong></p>

<p>In the following demo, Dor is running 4 different OSv base virtual appliances
on his laptop:</p>

<ul>
<li>Redis</li>
<li>Tomcat</li>
<li>MySQL</li>
<li>Cassandra</li>
</ul>


<p>Each virtual appliance is a full–blown VM, each with a pre-integrated
cloud application, and each launched without terminating the others.</p>

<!-- more -->




<script type="text/javascript" src="https://asciinema.org/a/11914.js" id="asciicast-11914" async></script>


<p>As you can see, application startup time takes between sub-second
(Redis) to a few seconds (Cassandra) depending on the application.
The hypervisor plus OS part of the boot time is less than a second for all cases.</p>

<p>Want more info on Capstan and related topics?  Join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get regular OSv updates by subscribing to this blog&rsquo;s feed, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's the Big Deal About OSv at Cassandra Summit 2014?]]></title>
    <link href="http://osv.io/blog/blog/2014/09/10/cassandra-summit/"/>
    <updated>2014-09-10T16:10:31-07:00</updated>
    <id>http://osv.io/blog/blog/2014/09/10/cassandra-summit</id>
    <content type="html"><![CDATA[<p><strong>Pop quiz: what does this graph show?</strong></p>

<p><img src="http://osv.io/blog/images/mystery-graph.png" alt="graph" /></p>

<p>If you&rsquo;d like a hint, here&rsquo;s some context.  It&rsquo;s from the upcoming <a href="http://www.cvent.com/events/cassandra-summit-2014/agenda-176f061a4b144525ae05f18cd9a9cb12.aspx">talk on Cassandra on OSv</a> at Cassandra Summit in San Francisco.</p>

<p>We&rsquo;ve been picking up a bunch of Cassandra tips at the event so far.  And we&rsquo;re really looking forward to (a) tomorrow&rsquo;s talks from the administrators of large-scale Cassandra sites and (b) showing off a new useful thing that should make life much easier for Cassandra admins who know <code>curl</code>. Which would be&hellip;everyone?</p>

<p>If you missed the chance to see Don Marti and Glauber Costa at Linuxcon/CloudOpen, please come see us, with bonus extra speaker <strong>Dor Laor</strong>.  Otherwise, you can keep up with the latest OSv news from this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>

<p>(Next up: <a href="http://www.xenproject.org/about/events/viewevent/120-xen-project-user-summit-2014.html">Xen Project User Summit</a> in New York City&hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wiki Watch: Cloud Init]]></title>
    <link href="http://osv.io/blog/blog/2014/08/28/wiki-watch-cloud-init/"/>
    <updated>2014-08-28T08:37:05-07:00</updated>
    <id>http://osv.io/blog/blog/2014/08/28/wiki-watch-cloud-init</id>
    <content type="html"><![CDATA[<p><a href="http://osv.io/blog/blog/2014/08/26/jolokia-jmx-connectivity-in-osv/">The previous blog article, on Jolokia</a> mentions a configuration item for cloud-init.  You may be asking, &ldquo;Cloud init?  How do I use that on OSv?&rdquo;  Well, good news.  For details on configuring OSv using the cloud init mechanism, check out our recently updated wiki page: <a href="https://github.com/cloudius-systems/osv/wiki/cloud-init">Cloud init</a>.</p>

<p><a href="https://github.com/tgrabiec">Tomasz Grabiec</a> has written an informative page on how to configure your OSv instance, from setting the port for the management HTTP server to filling in the content of config files. Check it out.  (Naturally, it&rsquo;s a wiki, so feel free to fill in additional details if you like.)</p>

<p>Want more info on cloud-init and related topics?  Join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get regular OSv updates by subscribing to this blog&rsquo;s feed, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jolokia JMX Connectivity in OSv]]></title>
    <link href="http://osv.io/blog/blog/2014/08/26/jolokia-jmx-connectivity-in-osv/"/>
    <updated>2014-08-26T07:11:20-07:00</updated>
    <id>http://osv.io/blog/blog/2014/08/26/jolokia-jmx-connectivity-in-osv</id>
    <content type="html"><![CDATA[<p><strong>By Calle Wilund</strong></p>

<p>OSv is a great way to run Java applications in the cloud, and it recently became just a little bit better. As you are probably aware, OSv exposes quite a bit of information and manageability options through its <a href="https://github.com/cloudius-systems/osv/wiki/The-RESTful-API">RESTful API</a>, accessible through the built-in HTTP server. More or less from its inception, this API has exposed various aspects of the JVM and the <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jmx/">Java Management Beans</a> provided.</p>

<p>Recently we improved on this a bit by including the <a href="http://www.jolokia.org/">Jolokia</a> JMX-via-JSON-REST connector, providing full read/write access to the entire set of Java manageability attributes and operations. Now you no longer need to set up and secure separate JMX-over-RMI connectivity with your Java application to fully manage it.</p>

<p>The Jolokia API is available via the OSv REST server at <nobr><code>http[s]://&lt;OSv host&gt;:&lt;port&gt;/jolokia</code></nobr>. You can explore this and other API:s via the <a href="https://github.com/cloudius-systems/osv/wiki/The-RESTful-API#using-the-swagger-ui">Swagger UI</a>.
For a better understanding of the full <a href="http://www.jolokia.org/reference/html/protocol.html">Jolokia syntax</a>, I suggest reading through the <a href="http://www.jolokia.org/reference/html/index.html">reference manual</a>. In its simplest form, querying a Java Management Bean value from an OSv instance can be done like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; curl http://&lt;ip&gt;:&lt;port&gt;/jolokia/read/java.lang:type=Memory/HeapMemoryUsage</span></code></pre></td></tr></table></div></figure>


<p>With the result of something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>   
</span><span class='line'>  <span class="s2">&quot;timestamp&quot;</span>   <span class="o">:</span><span class="mi">1409065190</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;status&quot;</span>  <span class="o">:</span><span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;request&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;mbean&quot;</span>       <span class="o">:</span><span class="s2">&quot;java.lang:type=Memory&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;attribute&quot;</span>   <span class="o">:</span><span class="s2">&quot;HeapMemoryUsage&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;type&quot;</span>        <span class="o">:</span><span class="s2">&quot;read&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;value&quot;</span>       <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;max&quot;</span>     <span class="o">:</span><span class="mi">1839202304</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;committed&quot;</span>   <span class="o">:</span><span class="mi">1839202304</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;init&quot;</span>        <span class="o">:</span><span class="mi">1918894080</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;used&quot;</span>        <span class="o">:</span><span class="mi">192117128</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jolokia provides a full syntax for packaging JMX bean information inside JSON objects, including the ability to batch requests.  It also provides client connector libraries for <a href="http://www.jolokia.org/client/java.html">Java</a>, <a href="http://www.jolokia.org/client/perl.html">Perl</a> and <a href="http://www.jolokia.org/client/javascript.html">JavaScript</a> to access them easily from (web) applications.</p>

<h2>Important note about REST requests and browser security</h2>

<p>Most browsers today enforce that resources such as REST queries may only be made to the same domain as the requesting web page. When you want to allow <a href="http://www.w3.org/TR/cors/">cross-domain requests</a> you need to either turn off this security feature in your browser (for Google Chrome you can run it with <code>--disable-web-security</code>, however if you use Firefox I do not know of any way to do it), or enable CORS in OSv.</p>

<p>To do the latter, you need to provide a <code>httpserver</code> configuration section in your <a href="https://github.com/cloudius-systems/osv/wiki/Cloud-init">cloud init</a> settings. To simply allow all domains to make requests to the OSv APIs, add this to your configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">httpserver</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">access-allow</span><span class="p-Indicator">:</span> <span class="s">&#39;*&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And make this reachable through your cloud-init server. (Or use the EC2 simulator script provided with OSv).</p>

<h2>A small demo</h2>

<p>A small demo JavaScript application showing how to easily plot various JVM graphs from a running OSv instance can be found at <a href="https://github.com/elcallio/jolokia-demo">https://github.com/elcallio/jolokia-demo</a> (which is a modified fork of the <a href="https://github.com/nurkiewicz/token-bucket">Jolokia demo</a> created by Tomasz Nurkiewicz.</p>

<p>To test the demo, simply clone the repository and edit the <a name="osvhost"><code>src/js/osvhost.js</code></a> to match the IP address and port for your OSv instance. (Don&rsquo;t forget to make sure that your OSv image includes the HTTP server).</p>

<p>Since I am runnning OSv compiled from source, I simply go to my OSv source tree and type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> make image=httpserver,mgmt</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>&hellip;&lt;chug, chug, chug></em>
And when it is done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">&gt;</span><span class="err"> ./scripts/run.py --api</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will build and start an almost empty image, containing only the HTTP server, <a href="https://github.com/cloudius-systems/osv/wiki/Cloud-init">cloud init support</a> and the Java-based shell (not a very interesting appliance, I admit, but you can pick any image you prefer). Running like this, the REST API is available from <code>http://localhost:8000</code>, so this is what I enter into <a href="#osvhost"><code>src/js/osvhost.js</code></a>.</p>

<p>Then load the <code>jolokia-demo/src/index.html</code> in your favourite browser, and you should be greeted by this:</p>

<p><img src="http://osv.io/blog/images/jolokia-demo.png" alt="screenshot" /></p>

<p>As you can see, the demo provides the start of a small management console for Java with just a few lines of Javascript code, most of which actually deal with setting up the charts. Requesting and polling the actual data on the other hand is almost ridiculously easy.</p>

<p>Having Jolokia integrated in the OSv manageability layer means that not only can you access all the JMX attributes parallel with the rest of the exposed OSv aspects, not having to modify Java appliances, but also that you only need to deal with <a href="https://github.com/cloudius-systems/osv/wiki/The-RESTful-API#configuring-ssl">securing a single service point</a>.</p>

<p>This is just one small aspect of all the new and exciting manageability features that are in or coming to OSv. Over the next few months we hope to bring you additional aspects that will further enhance your deployment experience. Stay tuned.</p>

<p>If you have any questions on OSv management, please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get general updates by subscribing to this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSv in the Spotlight at LinuxCon/CloudOpen 2014]]></title>
    <link href="http://osv.io/blog/blog/2014/08/20/linuxcon-cloudopen/"/>
    <updated>2014-08-20T16:10:31-07:00</updated>
    <id>http://osv.io/blog/blog/2014/08/20/linuxcon-cloudopen</id>
    <content type="html"><![CDATA[<p>While we relax and don&rsquo;t have to fix anything on our slides (really, they&rsquo;re all done), other speakers at the Linux Foundation&rsquo;s <a href="http://events.linuxfoundation.org/events/cloudopen-north-america">CloudOpen North America conference</a> in beautiful Chicago have some observations to make about OSv.</p>

<p><img src="http://osv.io/blog/images/chicago-river.jpeg" alt="Chicago River" /></p>

<p><strong>The Linux Foundation always picks great conference locations.</strong></p>

<p><a href="http://lccona14.sched.org/speaker/rcpavlicek">Russell Pavlicek</a> from the Xen project mentioned several library OSs that run on Xen in his <a href="http://lccona14.sched.org/event/17fdf31e5913cc4ebd5cf1f2ec039aa0">talk on new Xen features</a>.  He called the concept &ldquo;one of the biggest advances in the cloud.&rdquo;  Earlier library OSs have shown how much performance and simplicity gains are available, and OSv is extending the idea to ordinary POSIX and Java applications.</p>

<p><a href="http://lccona14.sched.org/speaker/mikeday">Mike Day</a> from IBM said, &ldquo;the engineers who write OSv are really good C++ coders,&rdquo; and called the project &ldquo;some of the finest C++ source code I&rsquo;ve ever seen&rdquo; in his <a href="http://lccona14.sched.org/event/434032efc316cc7aa98d4d590abda72e">talk on cloud operating systems for servers</a>.  He also had some praise for the <a href="http://osv.io/blog/blog/2014/04/19/spinlock-free/">spinlock-free way</a> that OSv handles mutexes, which as regular readers of this blog will know is important to prevent the dreaded lock-holder preemption problem.</p>

<p>If you&rsquo;re at LinuxCon, excuse me, #linuxcon, please come over and say &ldquo;hi&rdquo; to the OSv speakers: Don Marti and Glauber Costa. Hope to see you at the event, and please come to &ldquo;<a href="http://lccona14.sched.org/event/4684a80dd37f200277e971133920a2d0">Beating the Virtualization Tax for NoSQL Workloads With OSv</a>&rdquo; on Friday at 10:45 in the Colorado room.   Otherwise, you can get general OSv updates by subscribing to this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>

<p><strong>Chicago River photo: <a href="http://commons.wikimedia.org/wiki/File:Chicago_river_2004.jpg">Urban for Wikimedia Commons</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis on OSv]]></title>
    <link href="http://osv.io/blog/blog/2014/08/14/redis-memonly/"/>
    <updated>2014-08-14T09:26:31-07:00</updated>
    <id>http://osv.io/blog/blog/2014/08/14/redis-memonly</id>
    <content type="html"><![CDATA[<p><strong>By Glauber Costa and Don Marti</strong></p>

<p>We&rsquo;re planning to attend the
Linux Foundation&rsquo;s <a href="http://events.linuxfoundation.org/events/cloudopen-north-america">CloudOpen North America conference</a>.  Hope to see you there, and please come to our talk, &ldquo;<a href="http://lccona14.sched.org/event/4684a80dd37f200277e971133920a2d0">Beating the Virtualization Tax for NoSQL Workloads With OSv</a>.&rdquo;</p>

<p>We&rsquo;ll be using a popular NoSQL database for our demo: Redis.  If you&rsquo;d like to follow along, you&rsquo;re welcome to clone and build Redis on OSv.  We&rsquo;re big Redis fans, because it&rsquo;s a fast, easy-to-administer, in-memory database that works with many useful data structures.</p>

<h2>Redis A to Z</h2>

<p><a href="http://redis.io/">Redis</a> is a remarkably useful piece of software.  People on the Internet talk about Redis a lot.  Here&rsquo;s what Google Suggest has to say about it: <strong>Atomic, benchmark, cluster, delete, expire, failover, gem, hash, incr, Java, key, list, master/slave, node.js, objects, Python, queue, Ruby, set, ttl, Ubuntu, &ldquo;vs. mongodb&rdquo;, Windows, XML, yum, zadd</strong>.  (<a href="http://redis.io/commands/ZADD">zadd</a> is a really cool command by the way.  A huge time-saver for maintaining &ldquo;scoreboard&rdquo; state for games and content-scoring applications.  Did we mention that we&rsquo;re Redis fans?)</p>

<p>Redis fills a valuable niche between memcached and a full-scale NoSQL database such as Cassandra.  Although it&rsquo;s fast and perfectly usable as a simple key-value store, you can also use Redis to manage more featureful data structures such as sets and queues.</p>

<p>It makes a great session cache, lightweight task queue, or a place to keep pre-rendered content or ephemeral data, and it&rsquo;s a <a href="http://highscalability.com/display/Search?moduleId=4876569&amp;searchQuery=redis">star at highscalability.com</a>.</p>

<p>But you probably already know that.</p>

<h2>Building Redis on OSv</h2>

<p>Redis works normally on OSv except for one feature: the
<a href="http://redis.io/commands/bgsave">BGSAVE</a>
command.  A Redis background
save depends on the operating system&rsquo;s
<a href="http://en.wikipedia.org/wiki/Copy-on-write#Copy-on-write_in_virtual_memory_management">copy-on-write</a>
functionity.  When you issue the BGSAVE
command, the parent Redis process calls
<a href="http://en.wikipedia.org/wiki/Fork_%28system_call%29">fork</a>,
and the parent process keeps running while the child
process saves the database state.</p>

<p>Copy-on-write ensures that the child process sees
a consistent set of data, while the parent gets its
own copy of any page that it modifies.</p>

<p>Because OSv has a single address space,
that isn&rsquo;t an option here. OSv support Redis
<a href="http://redis.io/commands/save">SAVE</a> but not BGSAVE. Other than that,
running redis on OSv requires little effort. From the OSv source tree,
all one should do is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make image=redis-memonly</span></code></pre></td></tr></table></div></figure>


<p>Now you have a <code>usr.img</code> file, which you can run locally with OSv&rsquo;s <code>run.py</code>.  Behind the scenes, all that this build step is doing is to issue the application&rsquo;s <code>make</code>, with the right set of flags so redis is a shared library.  For more info on how to do that, see <a href="http://osv.io/blog/blog/2014/04/03/capstan/">our earlier example</a>.  of how to use the <code>-fPIC</code> and <code>-shared</code> options.</p>

<h2>Is it fast?</h2>

<p>We have been running redis on local machines to test many of its
functionalities and help us mature OSv.  As with any piece of software, the
result of course depends on many factors.  Because OSv is an operating system
designed for the cloud, we wanted to showcase its performance running on Amazon
EC2.</p>

<p>To do that, we have selected the <a href="http://aws.amazon.com/ec2/instance-types/">c3.x8large</a> machines.  They feature 32 CPUs and
60Gb of memory each. We are fully aware this is an overkill in the case
of Redis &ndash; a single threaded application. However, those are the only machines
that Amazon advertises as featuring 10Gb networking, and we didn&rsquo;t want the
network to be a bottleneck for the sake of the benchmark. Also, smaller
machines cannot be put in EC2 placement groups. It all boils down to the network!</p>

<p>So in this benchmark, no more than two cores should be active at any given time &ndash; one for redis, one for network interrupt processing. In a real scenario, one could easily deploy in a smaller machine.</p>

<h3>Benchmark setup</h3>

<p>We have benchmarked redis&#8217; latest beta (beta-8) running both on OSv, and on an
Ubuntu14 AMI. To do that, we have just launched a new AMI, selected
Ubuntu14.04, and launched it. Once it launched, we have downloaded and compiled
redis&#8217; latest, and moved the redis.conf used by OSv to the machine. The only
difference in that configuration file from what is shipped with redis by
default, is that we disable disk activity. As already explained,
OSv currently do not support that, and to be fair, the Linux guest we are
comparing against should not hit the disk either at any point.</p>

<p>On ubuntu, redis was run with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>numactl --physcpubind=1 redis-server ~/redis.conf</span></code></pre></td></tr></table></div></figure>


<p>Using numactl considerably reduces the standard deviation coming from the Linux
scheduler moving the thread around.</p>

<p>The <code>redis-benchmark</code> command was issued in another machine of the same type,
running in the same zone and placement group.</p>

<p>The two commands were:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>numactl --physcpubind=1 redis-benchmark --csv -h &lt;IP&gt; -c 50 -n 100000 -P 1</span></code></pre></td></tr></table></div></figure>


<p>and later on, to demonstrate how OSv can handle larger messages,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>numactl --physcpubind=1 redis-benchmark --csv -h &lt;IP&gt; -c 50 -n 100000 -P 16</span></code></pre></td></tr></table></div></figure>


<p>What this last command does, is to exercise redis&#8217; <code>pipeline</code> feature, that
can send multiple &ndash; in this case 16 &ndash; commands in the same packet. This will
decrease the impact of the round trip time in the final figure.</p>

<p>The difference can be clearly seen in the graph&hellip;</p>

<p><a href="http://osv.io/blog/images/redis.png"><img src="http://osv.io/blog/images/redis.png" alt="Redis benchmark results" /></a></p>

<p>Note that the LRANGE class of commands has a significantly different pattern
than the other commands. In that command, the client sends a very short query,
and receive a potentially very large reply, thereby exercising the transmission
path, rather than the receive path of OSv. This table shows that our transmission
path is lacking a bit of love, particularly when the response sizes grows (as the
pipeline level increases)</p>

<h2>Conclusions</h2>

<p>OSv is a fast maturing, but not yet mature operating system, soon to be in beta
phase. We have gaps to close, as can be seen in the case of LRANGE set of
benchmarks. So far, we have focused our efforts in technologies around the
receive path, and it has paid off: We can offer a level of performance far
beyond what an out of the box distribution can. Some features that we
architecturally lack, makes the use of Redis as a full-blown on-disk database
challenging. But if you want to serve your load from memory, the OSv promise
delivers: With OSv, you don&rsquo;t have to pay the virtualization tax.</p>

<p>If you&rsquo;ll be at CloudOpen, you can <a href="http://lccona14.sched.org/event/4684a80dd37f200277e971133920a2d0">add our talk to your schedule now</a>.</p>

<p>If you have any questions on running Redis or any other application, please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get general updates by subscribing to this blog&rsquo;s <a href="http://osv.io/blog/atom.xml">feed</a>, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Clojure on OSv: Easier With a New Capstan Template]]></title>
    <link href="http://osv.io/blog/blog/2014/07/27/capstan-lein-template/"/>
    <updated>2014-07-27T00:00:00-07:00</updated>
    <id>http://osv.io/blog/blog/2014/07/27/capstan-lein-template</id>
    <content type="html"><![CDATA[<p>Clojure developers usually do not care too much about the underlying OS.
The low-level differences between Linux, Mac OS, and even Microsoft Windows are abstracted away by the JVM.</p>

<p>When deploying Clojure code on the cloud, there used to be one default choice &ndash; Linux.
But Linux
<a href="http://osv.io/blog/blog/2014/07/21/generic-os-is-dead/">is not an ideal OS</a>
for pure cloud services.</p>

<p><a href="https://github.com/cloudius-systems/osv">OSv</a> is a new, open source OS, designed specifically for the cloud.  Since OSv supports the standard JVM, it is ideal for running Clojure applications on the cloud.  And the same configuration applies to building VMs for any cloud: public clouds such as Amazon&rsquo;s and Google&rsquo;s, private clouds based on VMware or KVM, or public and private OpenStack.</p>

<p>Porting a Clojure application to OSv was already
<a href="http://osv.io/blog/blog/2014/04/22/riemann-on-osv/">pretty easy</a>, but
now it&rsquo;s even easier.  This blog post describes a new <a href="https://github.com/tzach/capstan-lein-plugin">lein template</a> for OSv.</p>

<!-- more -->


<h2>Usage</h2>

<p>Capstan works together with the <a href="http://leiningen.org/">Leinigen</a> build tool.</p>

<p>First, create a new project skeleton.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lein new capstan new-app</span></code></pre></td></tr></table></div></figure>


<p>Now, you can run <a href="https://github.com/cloudius-systems/capstan">Capstan</a> to
run your project on an a OSv VM.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd new-app
</span><span class='line'>capstan run</span></code></pre></td></tr></table></div></figure>


<p>The template takes care of creating the project skeleton, including the Capstanfile.  When this is done, you can use Capstan directly to build a new OSv VM, deploy it on the cloud, or upload it to the public repository.</p>

<script type="text/javascript" src="https://asciinema.org/a/11068.js"
id="asciicast-11068" async="" data-speed="2" data-autoplay="1"
ata-size="medium"></script>


<p></p></p>

<p>For more info on Capstan and other OSv subjects, please join
the
<a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.<br/>
You can get updates on by subscribing to the <a href="http://osv.io/blog/atom.xml">OSv blog RSS feed</a> or following <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If Java Application Servers Are Dead, So Is the Operating System (in the Cloud)]]></title>
    <link href="http://osv.io/blog/blog/2014/07/21/generic-os-is-dead/"/>
    <updated>2014-07-21T00:00:00-07:00</updated>
    <id>http://osv.io/blog/blog/2014/07/21/generic-os-is-dead</id>
    <content type="html"><![CDATA[<p><strong>By Tzach Livyatan</strong>
This post is a response to the excellent presentation <a href="http://www.slideshare.net/ewolff/java-application-servers-are-dead"><strong>&ldquo;Java Application Servers Are Dead!&rdquo;</strong></a> by <a href="https://twitter.com/ewolff">Eberhard Wolff</a>.
Go read his slides and come back here.</p>

<p>Back already?
Assuming you agree with Eberhard’s  claims,  let me demonstrate how
most of his points on Java Application Servers can be applied to a
generic OS (one designed for hardware servers) in the cloud as well.</p>

<!-- more -->


<p>First let me scope the discussion.
An operating system can run on your mobile, desktop, back office, or as a VM on the cloud.
For this post, I’m referring specifically to the cloud use case, which can be public or private.
Cloud deployments are the important case to concentrate on, as new Java application servers are mostly deployed on VMs these days.</p>

<p><img src="http://osv.io/blog/images/turtles.png" alt="turtles all the way down" />
Illustration: Omarcito for Wikimedia Commons (<a href="http://commons.wikimedia.org/wiki/File:Omarcito.gif">http://commons.wikimedia.org/wiki/File:Omarcito.gif</a>)</p>

<p>Eberhard present different properties of the Java Application Server, and for each, demonstrates why it is no longer relevant.
I will follow his footsteps, applying the same methodology to generic
OS, for two of the properties: <em>Container for multiple applications</em> and <em>Deployment</em>.</p>

<h2>Container for multiple applications</h2>

<p>Both the Java application server and the OS are supposed to isolate applications from each other. Both do a good job at it, and OS isolation is definitely somewhat stronger.  However, it is still not good enough for multitenancy, <a href="http://osv.io/blog/blog/2014/06/19/containers-hypervisors-part-2/">even with OS-level containers</a>.
This is why we have hypervisors, and this is why most deployment in the clouds include one application per VM.</p>

<h2>Deployment</h2>

<p>I agree with Eberhard’s claim that Java deployments (JAR, WAR, EAR) are problematic.
Linux-style packaging, using RPM or deb packages, is not a full solution either.</p>

<p>In a cloud environment, there is no reason to start with a blank OS, and spend 15 minutes downloading and installing the application. It makes more sense to use a pre-installed server image (AMI, in AWS terms) with the application already installed. Indeed, using a ready-made AMI is a common practice.</p>

<p>Containers are another successful attempt to fix this problem, but running containers on a virtual machine brings an extra layer of complexity. More on that <a href="http://osv.io/blog/blog/2014/06/19/containers-hypervisors-part-1/">here</a>. Obviously, there is still a requirement to install urgent patches on both AMI and containers.</p>

<p>To summarize, both the  Java application server and the generic OS were created to provide a set of services which is no longer required.</p>

<h2>With Java AS and generic OS dead, what&rsquo;s next?</h2>

<p><strong> Micro Services </strong></p>

<p><em>&ldquo;an approach to developing a single application as a suite of small
 services, each running in its own process and communicating with
 lightweight mechanisms, often an HTTP resource API&rdquo;</em>
<a href="http://martinfowler.com/articles/microservices.html">Martin Fowler</a>
<img src="http://osv.io/blog/images/PreferFunctionalStaffOrganization.png" alt="&quot;From micro services" />
Illustration: Martin Fowler (<a href="http://martinfowler.com/articles/microservices.html">http://martinfowler.com/articles/microservices.html</a>)</p>

<p>Each micro service can can have its own end to end stack, from the OS up to the application.
As explained above, an ideal scenario would be to deploy the micro service logic directly on a hypervisor, cutting two middle layers: the application server and the generic OS.</p>

<p>At this point you might doubt my sanity.
Run my application on EC2 with no OS at all to support it? Not quite.</p>

<p>As you recall from the “AS are dead” presentation, the application server has become an application library, dedicated to supporting a single application. With the Library OS concept, the the same process can also be applied to the OS, making it a library of the application.</p>

<p>For every micro service, one can use a tool like
<a href="http://osv.io/capstan">Capstan</a> to cook a new VM, pre integrating the
application, JVM and the OS &ndash; to a ready to be deployed VM. Just take
it and deploy it on your favorite cloud provider.</p>

<p>Take Capstan for a <a href="http://osv.io/run-locally/">spin</a></p>

<p>For more info on Capstan and other OSv subjects, please join
the
<a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.<br/>
You can get updates on by subscribing to the <a href="http://osv.io/blog/atom.xml">OSv blog RSS feed</a> or following <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With the OSv Shrinker API]]></title>
    <link href="http://osv.io/blog/blog/2014/07/14/osv-shrinker-api/"/>
    <updated>2014-07-14T08:37:05-07:00</updated>
    <id>http://osv.io/blog/blog/2014/07/14/osv-shrinker-api</id>
    <content type="html"><![CDATA[<p><strong>By Don Marti</strong></p>

<p>If you&rsquo;re writing a program that keeps a cache in memory, you&rsquo;re probably expecting users to have to set the cache size, which means a configuration setting or command-line argument.  And every configuration setting or command-line argument is something that you have to document, or explain to users when they get it wrong.</p>

<p>Thankfully, there&rsquo;s an easier way.</p>

<!-- more -->


<p>With OSv, you can ask the OS to let your program know when memory is tight, so that you can manage the cache size on the fly.  Less time spent tweaking settings, more items kept in cache, what&rsquo;s not to like?  Just set up a shrinker callback and register it.  (There is a <a href="https://www.kernel.org/doc/Documentation/cgroups/memory.txt">mechanism for memory pressure notifications</a> on Linux, but it&rsquo;s somewhat complex. With OSv it&rsquo;s just one function to write.)</p>

<h2>Defining a shrinker function</h2>

<p>OSv notifies your program of a low memory situation by
calling a shrinker callback.</p>

<p>A shrinker function takes two arguments:</p>

<ul>
<li><p>target amount of memory to free (size_t)</p></li>
<li><p>A boolean &ldquo;hard&rdquo; argument.  This is false if the function is being called for preemptive freeing of memory, and true if the system is under severe pressure.</p></li>
</ul>


<p>In most invocations, the argument <code>hard</code> will be set by OSv to false. This indicates that the system is acting preemptively, and memory pressure is starting to build up. The application is free to defer the freeing of objects to a later stage. Having your shrinker callback called with <code>hard</code> set to true, however, means that OSv is under severe memory pressure, and may be unable to serve allocations. If not enough memory is freed, the system may be forced to abort.</p>

<h2>Registering</h2>

<p>Now that the shrinker function is defined, you need to register it.</p>

<p>To register a shrinker function involves calling <code>osv_register_shrinker</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void *osv_register_shrinker(const char *name,
</span><span class='line'>                            size_t (*func)(size_t target, bool hard));</span></code></pre></td></tr></table></div></figure>


<p>For example, an application in C can just do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>extern void *osv_register_shrinker(const char *name,
</span><span class='line'>                            size_t (*func)(size_t target, bool hard));
</span><span class='line'>
</span><span class='line'>int main () {
</span><span class='line'>  ...
</span><span class='line'>  osv_register_shrinker("Example Shrinker", shrinker_function);
</span><span class='line'>  ...
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>An extremely basic example of a program that uses the OSv shrinker API is <a href="https://github.com/dmarti/memory-hog">memory-hog</a>.  To try it, install <a href="https://github.com/cloudius-systems/capstan">Capstan</a>, clone the Git repository, and build an OSv image to run it.  Currently memory-hog requires at least 2GB of memory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:dmarti/memory-hog.git
</span><span class='line'>Cloning into 'memory-hog'...
</span><span class='line'>remote: Reusing existing pack: 76, done.
</span><span class='line'>remote: Total 76 (delta 0), reused 0 (delta 0)
</span><span class='line'>Receiving objects: 100% (76/76), 12.84 KiB | 0 bytes/s, done.
</span><span class='line'>Resolving deltas: 100% (39/39), done.
</span><span class='line'>Checking connectivity... done.
</span><span class='line'>$ cd memory-hog
</span><span class='line'>$ capstan run -m 2G
</span><span class='line'>Building memory-hog...
</span><span class='line'>Created instance: memory-hog
</span><span class='line'>OSv v0.09
</span><span class='line'>eth0: 192.168.122.15
</span><span class='line'>I'm a memory hog!
</span><span class='line'>program:  Oink!
</span><span class='line'>program:  Oink!
</span><span class='line'>program:  Oink!
</span><span class='line'>
</span><span class='line'>...many "Oink!"s later...
</span><span class='line'>
</span><span class='line'>program:  Oink!
</span><span class='line'>shrinker: Soft pressure, all done.
</span><span class='line'>program:  Oink!
</span><span class='line'>shrinker: Soft pressure, all done.
</span><span class='line'>program:  Oink!
</span><span class='line'>shrinker: Soft pressure, all done.
</span><span class='line'>program:  Oink!
</span><span class='line'>shrinker: Soft pressure, all done.
</span><span class='line'>program:  Oink!
</span><span class='line'>shrinker: Soft pressure, all done.
</span><span class='line'>program:  Oink!
</span><span class='line'>shrinker: Soft pressure, all done.
</span><span class='line'>shrinker: processing request to free 166062080 bytes.
</span><span class='line'>shrinker: starting with 64 things.
</span><span class='line'>shrinker: finishing with 58 things.
</span><span class='line'>      192534576 bytes of memory were freed!
</span><span class='line'>program:  Oink!
</span><span class='line'>shrinker: Soft pressure, all done.</span></code></pre></td></tr></table></div></figure>


<h2>Concurrency</h2>

<p>Shrinker callbacks conceptually work like asynchronous signal handlers,
They handle specific events and may be called at any time, from your program&rsquo;s point of view.</p>

<p>Each cache in your program that the shrinker can release data from,
must have its own lock to prevent concurrency issues.</p>

<p>The memory-hog sample program uses a mutex to handle concurrency.  To handle soft memory pressure, where your shrinker is called with <code>hard</code> set to false, you can keep a global <code>free_memory_please</code> global variable, and set it in the shrinker callback.  Then check it in the main loop, and free memory if necessary.  However, hard memory pressure must be handled immediately, or the system may hang.</p>

<h2>Handling soft pressure</h2>

<p>If possible, you should have your shrinker try to release some memory when called with <code>hard</code> set to false.  This will reduce the number of times you have to handle shrinking, and improve performance by making more free memory available to OSv for system tasks.  The memory-hog example currently ignores soft pressure.</p>

<p>For more info on memory management and other OSv subjects, please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get updates on by subscribing to the <a href="http://osv.io/blog/atom.xml">OSv blog RSS feed</a> or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inside the OSv Boot Process]]></title>
    <link href="http://osv.io/blog/blog/2014/07/11/osv-boot/"/>
    <updated>2014-07-11T08:37:05-07:00</updated>
    <id>http://osv.io/blog/blog/2014/07/11/osv-boot</id>
    <content type="html"><![CDATA[<p>What happens in that critical fraction of a second between when a virtual x86_64 system &ldquo;powers up&rdquo; and when it begins running operating system code written in a high-level language?</p>

<p>For a helpful walk-through, there&rsquo;s a new article on the OSv wiki, originally written by Elazar Leibovich.</p>

<p><img src="http://osv.io/blog/images/pc-power.jpeg" alt="IBM PC power switch" /></p>

<p><strong>The boot process for a modern VM traces its history back to the
original IBM PC.</strong></p>

<p>While some of the intricate startup steps are historic, the end result is an OSv boot time that&rsquo;s less than a second&mdash;an order of magnitude faster than a conventional multi-user OS.  To read (or contribute!) details,
<a href="http://github.com/cloudius-systems/osv/wiki/OSv-early-boot-(MBR)">the &ldquo;OSv early boot&rdquo; article on the wiki.</a></p>

<p>(photo: <a href="http://commons.wikimedia.org/wiki/File:XT-PC-Power-Supply-PCB-IMG_0436.JPG">Hans Haase for Wikimedia Commons</a>. Available under the Creative Commons Attribution-Share Alike 3.0 Unported license.)</p>

<p>If you have any questions on OSv internals, or porting your application, please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a>.  You can get general updates by subscribing to this blog&rsquo;s feed, or folllowing <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems</a> on Twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is the Most Popular OSv Virtual Appliance?]]></title>
    <link href="http://osv.io/blog/blog/2014/07/01/s3stat/"/>
    <updated>2014-07-01T00:00:00-07:00</updated>
    <id>http://osv.io/blog/blog/2014/07/01/s3stat</id>
    <content type="html"><![CDATA[<p><strong>By Tzach Livyatan</strong></p>

<p>(Spoiler: It&rsquo;s Apache Tomcat.)</p>

<p><a href="https://github.com/cloudius-systems/capstan">Capstan</a> is a tool for rapidly building and running applications on OSv.
As with Docker, Capstan users can download and run images from a public repository.
We chose to implement our public Capstan repository using <a href="http://aws.amazon.com/s3/">Amazon S3</a>.</p>

<p>Amazon S3  gives us the flexibility and security we need, but by default it&rsquo;s missing a critical feature: download statistics.
This statistics are very interesting to us, to evaluate which of the Capstan virtual appliances are more popular.  Fortunately, there is an easy way to gather the stats we need.</p>

<p>After a short tools survey, we choose <a href="http://www.s3stat.com/">s3stat</a>.</p>

<p><a href="http://www.s3stat.com/">s3stat</a> is a cloud-based service which can follow an S3 bucket, and visualize download statistics, by file, country, browser day, or otherwise.
The price makes sense, and it is super easy to enable.</p>

<p><img src="http://osv.io/blog/images/s3stat_chart.png" alt="s3stat chart" /></p>

<p>So what are the results? (drum roll&hellip;.)</p>

<!-- more -->


<p><img src="http://osv.io/blog/images/s3stat_files.png" alt="s3stat files" /></p>

<p>Omitting Capstan download of capstan index.yaml files, which Capstan does for every repository search, the most popular images are the base images for OSv and OSv + Java.
That make sense because these two images will be used by anyone who wants to build a local OSv application, running a native or Java application.</p>

<p>Virtual appliances comes right after, with (drums again&hellip;.) <strong>Tomcat</strong>, <strong>Cassandra</strong>, <strong>Memcached</strong> on the podium (Tomcat wins the Gold).
These are all very early results, but we will keep using s3stat to follow Capstan image downloads.</p>

<p><img src="http://osv.io/blog/images/s3stat_map.png" alt="s3stat map" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hypervisors Are Dead, Long Live the Hypervisor (Part 3)]]></title>
    <link href="http://osv.io/blog/blog/2014/06/23/containers-hypervisors-part-3/"/>
    <updated>2014-06-23T13:00:00-07:00</updated>
    <id>http://osv.io/blog/blog/2014/06/23/containers-hypervisors-part-3</id>
    <content type="html"><![CDATA[<p><strong>By Dor Laor and Avi Kivity</strong></p>

<h1>The new school: functionality, isolation and simplicity</h1>

<p>(This is part 3 of a 3-part series. <a href="http://osv.io/blog/blog/2014/06/19/containers-hypervisors-part-1/">Part 1</a>, <a href="http://osv.io/blog/blog/2014/06/19/containers-hypervisors-part-2/">Part 2</a>)</p>

<p>Containers make administration simple, and VMs give you portability, isolation, and administration advantages. The concept of putting <a href="http://www.slideshare.net/jpetazzo/linux-containers-lxc-docker-and-security">containers inside VMs</a> gives you the isolation you need, but there are now two layers of configuration and overhead instead of one.</p>

<p>What if there were one technology that could give us the simplicity and reduced overhead of containers and the security, tools, and hardware support of hypervisors? That’s where OSv comes in.  OSv, the “Operating System Designed for the Cloud.” takes an approach different from either containerization or virtualizing an existing bare-metal OS.  OSv is a single address space OS, designed to run as a guest only, with one application per VM.</p>

<h2>Best of both worlds?</h2>

<p>Glauber Costa, in a speech at Linuxcon called <a href="https://events.linuxfoundation.org/images/stories/pdf/lceu2012_costa.odp">&ldquo;The failure of Operating Systems, and how we can fix it&rdquo;</a>, pointed out that the existence of hypervisors is evidence that Operating Systems alone cannot meet some of the demands of real workloads. Through OSv, we have the opportunity to work together with the hypervisor to create a superior solution to what can be done with the OS alone: combining the resource efficiency of containers with the processor-aided advantages of hardware virtualization.</p>

<p>In the eight years since the release of Intel VMX, the silicon has kept getting better and better at moving the costs of virtualization into hardware. Enterprise customers have been demanding lower virtualization overhead for as long as hypervisors have been a thing, and the best minds of the CPU industry are working on it. With nested page tables and other features coming “for free” on the processor, virtualization overhead is being squeezed closer and closer to parity with bare metal.</p>

<p><img src="http://osv.io/blog/images/duplication.png" alt="typical cloud stack with duplication" /></p>

<p><strong>Typical cloud stacks have duplicate functionality at the hypervisor, guest OS, and application levels.</strong></p>

<p>While many players are trying to carve out a simple OS containerization system at the guest OS level, they are ignoring the stable, simple, secure, hardware-supported interface we already have: the hypervisor-guest interface.  There’s nothing that says we have to use this well-tested, industry-standard interface just to run a large, complete OS designed for bare metal. (In fact, research projects such as “Erlang on Xen” and MirageOS have explored using the hypervisor to run something less than a full OS for quite a while.)</p>

<h2>OSv is designed to perform</h2>

<p>OSv transparently loads an application into its kernel space. There is no userspace whatsoever. It removes the need for user to kernel context switches. In addition, the kernel trusts the application, since it relies on the underlying hypervisor for isolation from other applications in other VMs. Thus it opens up a way for the application to use any kernel API – from taking scheduling decisions to zero copy operations on data, and even unlock the brute force of the hardware page tables for the benefit of the application or its framework.</p>

<p>To date (June 2014), OSv provides 4x better performance for Memcache, a 40% gain with Apache Tomcat, and a 20% gain with Cassandra and SPECjbb. These results are based on our alpha versions, and are likely to improve as we complete the optimizations remaining on our roadmap.</p>

<p><img src="http://osv.io/blog/images/workloads.png" alt="OSv example workloads" /></p>

<p><strong>OSv runs many key cloud workloads with low overhead and high performance.</strong></p>

<p>OSv&rsquo;s image is your app and our kernel. Sometimes it means an image size of 10MB! That&rsquo;s a 100-400x better than the traditional OS and resembles a container&rsquo;s footprint. The OSv boot time is under a second, which is also closer to container startup time.</p>

<h2>OSv management: some questions for devops</h2>

<p>How many configuration files does your OS have? <strong>OSv has zero.</strong></p>

<p>How many times have you had to perform string manipulation on UNIX-like config files? <strong>OSv is built for automation and uses a RESTful API instead.</strong></p>

<p>How hard is it to upgrade your OS, and how can you revert it? <strong>OS is stateless.</strong></p>

<p>With an hypervisor below, you get the features such as live migration, perfect SLA, superior security for free while you get to enjoy from OSv’s added value.</p>

<h2>Capstan – or what we have learned from Docker</h2>

<p>We do love Docker with regard to development. The neat public image repository and the dead-simple-single execution won our hearts. We wanted to have the same for VMs, so we created the <a href="http://osv.io/capstan/">Capstan</a> project. Capstan has a public image repository, and by executing &lsquo;capstan run cloudius/osv-cassandra&rsquo; a virtual machine image will be either downloaded to your laptop (Mac OS X, Microsoft Windows, or Linux) or be executed on your cloud of choice. Capstan also allows you to build images including an app and a base OSv image. It takes about three seconds. On Capstan&rsquo;s roadmap, we plan to support the Docker file format, run Java apps directly without a config file, and form a simple PaaS for developers to load their favorite app directly to a running VM.</p>

<h2>Pick a cloud, any cloud</h2>

<p>The business case for cloud computing has never been better for the customer. While Amazon continues to upgrade the available instances and offer faster VMs at lower prices, Google is coming on strong as well. Microsoft, HP, IBM, and others are all competing for cloud business.  The cloud VM is the new generic PC.  Because we can create standard VMs that will run on anyone’s cloud, or on a private or hybrid cloud, we can develop with the confidence that we’ll be able to deploy to whatever infrastructure makes business sense&mdash;or move, or split deployment.</p>

<p>Lastly, we like to point out we are not against containers. Container technology is awesome when used for the right scenario. As there are cases for public transportation versus private cars, the same applies to devops. Both containers and OSv excel, in different domains. Here is a simple flow chart that can guide you with your choices:</p>

<p><a href="http://osv.io/blog/images/flowchart.png"><img src="http://osv.io/blog/images/flowchart.png" alt="Guest OS selection flowchart" /></a></p>

<p>Using OSv on ubiquitous, secure, full-featured hypervisors is the way to keep performance up, costs down, and options open. We had to completely reinvent the guest OS to do it&mdash;but now that we have it, OSv is available to build on. Please join the <a href="https://groups.google.com/forum/#!forum/osv-dev">osv-dev mailing list</a> for technical info, or follow <a href="https://twitter.com/CloudiusSystems">@CloudiusSystems on Twitter</a> for the latest news.</p>

<p>( <a href="http://osv.io/blog/blog/2014/06/19/containers-hypervisors-part-1/">Part 1</a>, <a href="http://osv.io/blog/blog/2014/06/19/containers-hypervisors-part-2/">Part 2</a>
)</p>
]]></content>
  </entry>
  
</feed>
